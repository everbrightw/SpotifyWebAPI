{"ast":null,"code":"import axios from 'axios';\nimport qs from 'querystring';\nconst client_id = \"c64550a797cb4fc9931f45b4ca0e8c21\";\nconst client_secret = \"7c4d4382f48a40168a04273de0b91183\";\nconst ONE_HOUR = 60 * 60 * 1000;\n\nclass Utils {\n  async getAuthToken() {\n    const AUTH_TOKEN_KEY = 'auth-token';\n    const LAST_AUTH_TIME_KEY = 'last-auth-time';\n    let authToken = localStorage.getItem(AUTH_TOKEN_KEY);\n    let lastAuthTime = new Date(localStorage.getItem(LAST_AUTH_TIME_KEY));\n    let isExpired = new Date() - lastAuthTime >= ONE_HOUR;\n\n    if (!authToken || isExpired) {\n      let data = await this.authenticate();\n      authToken = data.access_token;\n      localStorage.setItem(AUTH_TOKEN_KEY, authToken);\n      localStorage.setItem(LAST_AUTH_TIME_KEY, new Date().toISOString());\n    } // console.log('authToken', authToken)\n\n\n    return authToken;\n  }\n\n  async authenticate() {\n    let basicToken = new Buffer(`${client_id}:${client_secret}`).toString('base64');\n    let res = await axios.post('https://accounts.spotify.com/api/token', qs.stringify({\n      grant_type: 'client_credentials'\n    }), {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: 'Basic ' + basicToken\n      }\n    });\n    return res.data;\n  }\n\n  async getConfig() {\n    let auth_token = await this.getAuthToken();\n    let config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \" + auth_token\n      }\n    };\n    return config;\n  }\n\n}\n\nexport const utils = new Utils();","map":{"version":3,"sources":["/Users/yusenwang/cs498rk/mp2/src/Utils.js"],"names":["axios","qs","client_id","client_secret","ONE_HOUR","Utils","getAuthToken","AUTH_TOKEN_KEY","LAST_AUTH_TIME_KEY","authToken","localStorage","getItem","lastAuthTime","Date","isExpired","data","authenticate","access_token","setItem","toISOString","basicToken","Buffer","toString","res","post","stringify","grant_type","headers","Authorization","getConfig","auth_token","config","utils"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,aAAf;AAGA,MAAMC,SAAS,GAAG,kCAAlB;AACA,MAAMC,aAAa,GAAG,kCAAtB;AACA,MAAMC,QAAQ,GAAG,KAAK,EAAL,GAAU,IAA3B;;AAEA,MAAMC,KAAN,CAAW;AAGP,QAAMC,YAAN,GAAqB;AACjB,UAAMC,cAAc,GAAG,YAAvB;AACA,UAAMC,kBAAkB,GAAG,gBAA3B;AACA,QAAIC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,cAArB,CAAhB;AACA,QAAIK,YAAY,GAAG,IAAIC,IAAJ,CAASH,YAAY,CAACC,OAAb,CAAqBH,kBAArB,CAAT,CAAnB;AACA,QAAIM,SAAS,GAAG,IAAID,IAAJ,KAAaD,YAAb,IAA6BR,QAA7C;;AAEA,QAAI,CAACK,SAAD,IAAcK,SAAlB,EAA6B;AAC3B,UAAIC,IAAI,GAAG,MAAM,KAAKC,YAAL,EAAjB;AACAP,MAAAA,SAAS,GAAGM,IAAI,CAACE,YAAjB;AACAP,MAAAA,YAAY,CAACQ,OAAb,CAAqBX,cAArB,EAAqCE,SAArC;AACAC,MAAAA,YAAY,CAACQ,OAAb,CAAqBV,kBAArB,EAAyC,IAAIK,IAAJ,GAAWM,WAAX,EAAzC;AACD,KAZgB,CAcjB;;;AACA,WAAOV,SAAP;AACH;;AAED,QAAMO,YAAN,GAAqB;AAEjB,QAAII,UAAU,GAAG,IAAIC,MAAJ,CAAY,GAAEnB,SAAU,IAAGC,aAAc,EAAzC,EAA4CmB,QAA5C,CAAqD,QAArD,CAAjB;AACA,QAAIC,GAAG,GAAG,MAAMvB,KAAK,CAACwB,IAAN,CACd,wCADc,EAEdvB,EAAE,CAACwB,SAAH,CAAa;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAb,CAFc,EAGd;AACEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,mCADT;AAEPC,QAAAA,aAAa,EAAE,WAAWR;AAFnB;AADX,KAHc,CAAhB;AAWA,WAAOG,GAAG,CAACR,IAAX;AACH;;AAGD,QAAMc,SAAN,GAAiB;AAEb,QAAIC,UAAU,GAAG,MAAM,KAAKxB,YAAL,EAAvB;AACA,QAAIyB,MAAM,GAAG;AACTJ,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAiB,YAAWG;AAFvB;AADA,KAAb;AAMA,WAAOC,MAAP;AACH;;AAjDM;;AAqDX,OAAO,MAAMC,KAAK,GAAG,IAAI3B,KAAJ,EAAd","sourcesContent":["import axios from 'axios'\nimport qs from 'querystring'\n\n\nconst client_id = \"c64550a797cb4fc9931f45b4ca0e8c21\";\nconst client_secret = \"7c4d4382f48a40168a04273de0b91183\";\nconst ONE_HOUR = 60 * 60 * 1000\n\nclass Utils{\n\n    \n    async getAuthToken() {\n        const AUTH_TOKEN_KEY = 'auth-token'\n        const LAST_AUTH_TIME_KEY = 'last-auth-time'\n        let authToken = localStorage.getItem(AUTH_TOKEN_KEY)\n        let lastAuthTime = new Date(localStorage.getItem(LAST_AUTH_TIME_KEY))\n        let isExpired = new Date() - lastAuthTime >= ONE_HOUR\n    \n        if (!authToken || isExpired) {\n          let data = await this.authenticate()\n          authToken = data.access_token\n          localStorage.setItem(AUTH_TOKEN_KEY, authToken)\n          localStorage.setItem(LAST_AUTH_TIME_KEY, new Date().toISOString())\n        }\n    \n        // console.log('authToken', authToken)\n        return authToken\n    }\n\n    async authenticate() {\n\n        let basicToken = new Buffer(`${client_id}:${client_secret}`).toString('base64')\n        let res = await axios.post(\n          'https://accounts.spotify.com/api/token',\n          qs.stringify({ grant_type: 'client_credentials' }),\n          {\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              Authorization: 'Basic ' + basicToken\n            }\n          }\n        )\n    \n        return res.data\n    }\n\n\n    async getConfig(){\n        \n        let auth_token = await this.getAuthToken();\n        let config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': \"Bearer \"+ auth_token\n            }\n        }\n        return config;\n    }\n\n}\n\nexport const utils = new Utils()"]},"metadata":{},"sourceType":"module"}